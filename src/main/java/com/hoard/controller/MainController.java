package com.hoard.controller;

import com.hoard.entity.Videogame;
import com.hoard.repository.VideogameRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api/videogame") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called videogameRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private VideogameRepository videogameRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewVideogame (@RequestParam String title
            , @RequestParam String email, @RequestParam String platform) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Videogame n = new Videogame();
        n.setTitle(title);
        n.setEmail(email);
        n.setPlatform(platform);
        videogameRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Videogame> getAllVideogames() {
        // This returns a JSON or XML with the users
        return videogameRepository.findAll();
    }

    @RequestMapping(value="/post", method= RequestMethod.POST)
    public ResponseEntity<Videogame> update(@RequestBody Videogame videogame){

        if (videogame != null) {
            if (videogame.getEmail() != null && videogame.getTitle() !=null) {
                videogameRepository.save(videogame);
            } else {
                return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
            }

        }

        // TODO: call persistence layer to update
        return new ResponseEntity<Videogame>(videogame, HttpStatus.OK);
    }
}